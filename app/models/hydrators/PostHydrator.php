<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class PostHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['title'])) {
            $value = $data['title'];
            $return = (string) $value;
            $this->class->reflFields['title']->setValue($document, $return);
            $hydratedData['title'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['slug'])) {
            $value = $data['slug'];
            $return = (string) $value;
            $this->class->reflFields['slug']->setValue($document, $return);
            $hydratedData['slug'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['text'])) {
            $value = $data['text'];
            $return = (string) $value;
            $this->class->reflFields['text']->setValue($document, $return);
            $hydratedData['text'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['html'])) {
            $value = $data['html'];
            $return = (string) $value;
            $this->class->reflFields['html']->setValue($document, $return);
            $hydratedData['html'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['created'])) {
            $value = $data['created'];
            if ($value instanceof \MongoDate) { $return = new \DateTime(); $return->setTimestamp($value->sec); } elseif (is_numeric($value)) { $return = new \DateTime(); $return->setTimestamp($value); } else { $return = new \DateTime($value); }
            $this->class->reflFields['created']->setValue($document, clone $return);
            $hydratedData['created'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['updated'])) {
            $value = $data['updated'];
            if ($value instanceof \MongoDate) { $return = new \DateTime(); $return->setTimestamp($value->sec); } elseif (is_numeric($value)) { $return = new \DateTime(); $return->setTimestamp($value); } else { $return = new \DateTime($value); }
            $this->class->reflFields['updated']->setValue($document, clone $return);
            $hydratedData['updated'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['published'])) {
            $value = $data['published'];
            if ($value instanceof \MongoDate) { $return = new \DateTime(); $return->setTimestamp($value->sec); } elseif (is_numeric($value)) { $return = new \DateTime(); $return->setTimestamp($value); } else { $return = new \DateTime($value); }
            $this->class->reflFields['published']->setValue($document, clone $return);
            $hydratedData['published'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['deleted'])) {
            $value = $data['deleted'];
            if ($value instanceof \MongoDate) { $return = new \DateTime(); $return->setTimestamp($value->sec); } elseif (is_numeric($value)) { $return = new \DateTime(); $return->setTimestamp($value); } else { $return = new \DateTime($value); }
            $this->class->reflFields['deleted']->setValue($document, clone $return);
            $hydratedData['deleted'] = $return;
        }

        /** @Field(type="boolean") */
        if (isset($data['isPublished'])) {
            $value = $data['isPublished'];
            $return = (bool) $value;
            $this->class->reflFields['isPublished']->setValue($document, $return);
            $hydratedData['isPublished'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['author'])) {
            $reference = $data['author'];
            if (isset($this->class->fieldMappings['author']['simple']) && $this->class->fieldMappings['author']['simple']) {
                $className = $this->class->fieldMappings['author']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->dm->getClassNameFromDiscriminatorValue($this->class->fieldMappings['author'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['author']->setValue($document, $return);
            $hydratedData['author'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['updatedBy'])) {
            $reference = $data['updatedBy'];
            if (isset($this->class->fieldMappings['updatedBy']['simple']) && $this->class->fieldMappings['updatedBy']['simple']) {
                $className = $this->class->fieldMappings['updatedBy']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->dm->getClassNameFromDiscriminatorValue($this->class->fieldMappings['updatedBy'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['updatedBy']->setValue($document, $return);
            $hydratedData['updatedBy'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['publishedBy'])) {
            $reference = $data['publishedBy'];
            if (isset($this->class->fieldMappings['publishedBy']['simple']) && $this->class->fieldMappings['publishedBy']['simple']) {
                $className = $this->class->fieldMappings['publishedBy']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->dm->getClassNameFromDiscriminatorValue($this->class->fieldMappings['publishedBy'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['publishedBy']->setValue($document, $return);
            $hydratedData['publishedBy'] = $return;
        }

        /** @Field(type="collection") */
        if (isset($data['tags'])) {
            $value = $data['tags'];
            $return = $value;
            $this->class->reflFields['tags']->setValue($document, $return);
            $hydratedData['tags'] = $return;
        }
        return $hydratedData;
    }
}